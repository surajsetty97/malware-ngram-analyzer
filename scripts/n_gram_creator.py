import n_gram_analyzer as nga
import os
import sys
import numpy as np
import pandas as pd

def main(args):
    INPUT_DIR = args[1]
    OUTPUT_FILE = args[2]
    NUM_FILES = int(args[3])
    N_GRAM_SIZE = int(args[4])


    freq_arr = get_freq_arr(INPUT_DIR,N_GRAM_SIZE, NUM_FILES)
    print("Highest frequencies: {}".format(freq_arr))

    csv_dict = dict((gram, []) for gram in freq_arr)
    
    count = 0
    for filename in os.listdir(INPUT_DIR):
        if count >= NUM_FILES:
            break
        count+=1
        frequencies = nga.get_gram_frequencies(N_GRAM_SIZE, INPUT_DIR + '/' + filename, freq_arr)
        normalize_dict(frequencies)
        for k in csv_dict:
            if k in frequencies:
                csv_dict[k].append(frequencies[k])
            else:
                csv_dict[k].append(0.0)
    df = pd.DataFrame(csv_dict)
    print(df)
    df.to_csv(OUTPUT_FILE, encoding='utf-8', index=False, header=None)
    print('Added to file: {}'.format(OUTPUT_FILE))
    

def get_freq_arr(input, ng_size, max_f):
    frequency_dict = {}

    count = 0
    for filename in os.listdir(input):
        if count >= max_f:
            break
        count+=1
        frequencies = nga.get_gram_frequencies(ng_size, input + '/' + filename)
        normalize_dict(frequencies)
        add_to_freq_dict(frequency_dict, frequencies)
    
    return get_highest_frequencies(frequency_dict,30)
    

def get_highest_frequencies(d,count):
    sorted_dict = sorted(d, key=lambda k: d[k][0], reverse=True)
    return sorted_dict[:count]


def normalize_dict(dictionary):
    factor=1.0/sum(dictionary.itervalues())
    for k in dictionary:
        dictionary[k] = dictionary[k]*factor

def add_to_freq_dict(freq_dict, input_dict):
    for k in input_dict:
        if k in freq_dict:
            val,count = freq_dict[k]
            freq_dict[k] = (((val*count)+input_dict[k])/(count+1),count+1)
        else:
            freq_dict[k] = (input_dict[k],1)

if __name__ == "__main__":
    main(sys.argv)
